# while you don't need to write this yourself,
# it's encouraged to understandwhat is happening with this code
# first and foremost, make sure you figure out the values to pass to the function
func_testing <- function(num_people,
prop_covid,
posrate_covid,
posrate_nocovid){
# make a dataframe by getting uniform random variables
# for population and positivity
df <- tibble(pop_rv = runif(num_people),
pos_rv = runif(num_people))
# set a new variable to be if the person has covid
# base on proportion of covid population
df <- df %>%
mutate(covid_yes = if_else(pop_rv <= prop_covid, TRUE, FALSE))
# prob covid, counts all the number of people with covid,
# and divides by whole population
# this value should be close to the prob_covid input
prob_covid <- df %>%
summarize(sum(covid_yes)) %>%
pull() / num_people
# clearly prob_nocovid is what remains of the probability space
# only two optinos for this example
prob_nocovid <- 1 - prop_covid
# here we add the test positive variable based on the results
# of the random variable for positivity
# note that the result is different if you have covid or don't
df <- df %>%
mutate(test_positive =
case_when( covid_yes == TRUE & pos_rv <= posrate_covid ~ TRUE, covid_yes == FALSE &
pos_rv <= posrate_nocovid ~ TRUE, TRUE ~ FALSE))
# here is the magic of tidyverse
# get back a summarize of the mean positive test for
# the people who have covid, and the people who don't
temp  <- df %>%
group_by(covid_yes) %>%
summarise(mean_positive = mean(test_positive), .groups = 'keep')
# we pull those values into variables
prob_pos_given_nocovid = temp[1,2] %>% pull() # positive given covid
prob_pos_given_covid = temp[2,2] %>% pull() # positive given no covid
# and we return the result for you as a list
return (list('prob_covid' = prob_covid,
'prob_nocovid' = prob_nocovid,
'prob_pos_given_covid' = prob_pos_given_covid,
'prob_pos_given_nocovid' = prob_pos_given_nocovid)
)
}
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
5000/100000
mean(disease[test=='Pos']=='1')
set.seed(123)
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(0.75,0.25))
test <- rep(NA, 1000000)
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c(0.9,0.1))
test[disease=='1'] <- sample(c('Neg','Pos'), size=sum(disease=='1'), replace=TRUE,prob=c(0.12, 0.88))
mean(test=='Pos')
mean(disease[test=='Pos']=='1')
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(0.95,0.05))
# generate an empty vector for "test"
test <- rep(NA, 1000000)
# "disease=0" is the set of patients who does not have COVID-19 and "disease=1" is the set of patients who have COVID-19.
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c(0.95, 0.05))
test[disease=='1'] <- sample(c('Neg','Pos'), size=sum(disease=='1'), replace=TRUE,prob=c(0.05, 0.95))
mean(disease[test=='Pos']=='1')
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
# use the function to get
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
# use the function to build the simulation
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(prob_nocovid,(1-prob_nocovid)))
list(prob_nocovid)
list("prob_nocovid")
a = list('prob_covid' = 1,
'prob_nocovid' = 2,
'prob_pos_given_covid' = 3,
'prob_pos_given_nocovid' = 4)
a(1)
a[1]
library(tidyverse)
# this function will return the appropriate probabilities
# that you need to answer the questions
# while you don't need to write this yourself,
# it's encouraged to understandwhat is happening with this code
# first and foremost, make sure you figure out the values to pass to the function
func_testing <- function(num_people,
prop_covid,
posrate_covid,
posrate_nocovid){
# make a dataframe by getting uniform random variables
# for population and positivity
df <- tibble(pop_rv = runif(num_people),
pos_rv = runif(num_people))
# set a new variable to be if the person has covid
# base on proportion of covid population
df <- df %>%
mutate(covid_yes = if_else(pop_rv <= prop_covid, TRUE, FALSE))
# prob covid, counts all the number of people with covid,
# and divides by whole population
# this value should be close to the prob_covid input
prob_covid <- df %>%
summarize(sum(covid_yes)) %>%
pull() / num_people
# clearly prob_nocovid is what remains of the probability space
# only two optinos for this example
prob_nocovid <- 1 - prop_covid
# here we add the test positive variable based on the results
# of the random variable for positivity
# note that the result is different if you have covid or don't
df <- df %>%
mutate(test_positive =
case_when( covid_yes == TRUE & pos_rv <= posrate_covid ~ TRUE, covid_yes == FALSE &
pos_rv <= posrate_nocovid ~ TRUE, TRUE ~ FALSE))
# here is the magic of tidyverse
# get back a summarize of the mean positive test for
# the people who have covid, and the people who don't
temp  <- df %>%
group_by(covid_yes) %>%
summarise(mean_positive = mean(test_positive), .groups = 'keep')
# we pull those values into variables
prob_pos_given_nocovid = temp[1,2] %>% pull() # positive given covid
prob_pos_given_covid = temp[2,2] %>% pull() # positive given no covid
# and we return the result for you as a list
return (l = list('prob_covid' = prob_covid,
'prob_nocovid' = prob_nocovid,
'prob_pos_given_covid' = prob_pos_given_covid,
'prob_pos_given_nocovid' = prob_pos_given_nocovid)
)
}
library(tidyverse)
# this function will return the appropriate probabilities
# that you need to answer the questions
# while you don't need to write this yourself,
# it's encouraged to understandwhat is happening with this code
# first and foremost, make sure you figure out the values to pass to the function
func_testing <- function(num_people,
prop_covid,
posrate_covid,
posrate_nocovid){
# make a dataframe by getting uniform random variables
# for population and positivity
df <- tibble(pop_rv = runif(num_people),
pos_rv = runif(num_people))
# set a new variable to be if the person has covid
# base on proportion of covid population
df <- df %>%
mutate(covid_yes = if_else(pop_rv <= prop_covid, TRUE, FALSE))
# prob covid, counts all the number of people with covid,
# and divides by whole population
# this value should be close to the prob_covid input
prob_covid <- df %>%
summarize(sum(covid_yes)) %>%
pull() / num_people
# clearly prob_nocovid is what remains of the probability space
# only two optinos for this example
prob_nocovid <- 1 - prop_covid
# here we add the test positive variable based on the results
# of the random variable for positivity
# note that the result is different if you have covid or don't
df <- df %>%
mutate(test_positive =
case_when( covid_yes == TRUE & pos_rv <= posrate_covid ~ TRUE, covid_yes == FALSE &
pos_rv <= posrate_nocovid ~ TRUE, TRUE ~ FALSE))
# here is the magic of tidyverse
# get back a summarize of the mean positive test for
# the people who have covid, and the people who don't
temp  <- df %>%
group_by(covid_yes) %>%
summarise(mean_positive = mean(test_positive), .groups = 'keep')
# we pull those values into variables
prob_pos_given_nocovid = temp[1,2] %>% pull() # positive given covid
prob_pos_given_covid = temp[2,2] %>% pull() # positive given no covid
# and we return the result for you as a list
return (l = list('prob_covid' = prob_covid,
'prob_nocovid' = prob_nocovid,
'prob_pos_given_covid' = prob_pos_given_covid,
'prob_pos_given_nocovid' = prob_pos_given_nocovid)
)
}
l[1]
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
l[1]
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
# use the function to build the simulation
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
l[1]
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
# use the function to build the simulation
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
l[1]
# Reference lab 2
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
# use the function to build the simulation
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(0.04949,0.95))
# generate an empty vector for "test"
test <- rep(NA, 1000000)
# "disease=0" is the set of patients who does not have COVID-19 and "disease=1" is the set of patients who have COVID-19.
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c((1-0.04974172), 0.04974172))
test[disease=='1'] <- sample(c('Neg','Pos'), size=sum(disease=='1'), replace=TRUE,prob=c((1-0.9488786), 0.9488786))
# P(disease|test+)
mean(disease[test=='Pos']=='1')
l = func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
l[1]
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
l[1]
l[2]
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# Reference lab 2
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
# use the function to build the simulation
l = func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(l[2],l[1]))
# generate an empty vector for "test"
test <- rep(NA, 1000000)
# "disease=0" is the set of patients who does not have COVID-19 and "disease=1" is the set of patients who have COVID-19.
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c((1-l[4]), l[4]))
l[4]
1-l[4]
l[4]
l = func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(l[2],l[1]))
l[1]
l = func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
unlist(l)
a = unlist(l)
a [1]
1-a[1]
l = func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
a = unlist(l)
a [1]
1-a[1]
l[[1]]
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# Reference lab 2
num_people = 100000
prop_covid = 5000/100000
posrate_covid = 0.95
posrate_nocovid = 0.05
# use the function to build the simulation
l = func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(l[[2]],l[[1]]))
# generate an empty vector for "test"
test <- rep(NA, 1000000)
# "disease=0" is the set of patients who does not have COVID-19 and "disease=1" is the set of patients who have COVID-19.
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c((1-l[[4]]), l[[4]]))
test[disease=='1'] <- sample(c('Neg','Pos'), size=sum(disease=='1'), replace=TRUE,prob=c((1-l[[3]]), l[[3]]))
# P(disease|test+)
mean(disease[test=='Pos']=='1')
5000/100000
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(0.05,0.95))
# generate an empty vector for "test"
test <- rep(NA, 1000000)
# "disease=0" is the set of patients who does not have COVID-19 and "disease=1" is the set of patients who have COVID-19.
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c(0.95,0.05))
test[disease=='1'] <- sample(c('Neg','Pos'), size=sum(disease=='1'), replace=TRUE,prob=c(0.05,0.95))
# P(disease|test+)
mean(disease[test=='Pos']=='1')
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(0.95,0.05))
# generate an empty vector for "test"
test <- rep(NA, 1000000)
# "disease=0" is the set of patients who does not have COVID-19 and "disease=1" is the set of patients who have COVID-19.
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c(0.95,0.05))
test[disease=='1'] <- sample(c('Neg','Pos'), size=sum(disease=='1'), replace=TRUE,prob=c(0.05,0.95))
# P(disease|test+)
mean(disease[test=='Pos']=='1')
func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# Reference: Lab 2
num_people = 100000
prop_covid = 10000/100000
posrate_covid = 0.6
posrate_nocovid = 0.1
# use the function to build the simulation
l = func_testing(num_people, prop_covid, posrate_covid, posrate_nocovid)
# simulate 1000000 tests for the referenced population
disease <- sample(c('0','1'), size=1000000, replace=TRUE, prob=c(l[[2]],l[[1]]))
# generate an empty vector for "test"
test <- rep(NA, 1000000)
# "disease=0" is the set of patients who does not have COVID-19 and "disease=1" is the set of patients who have COVID-19.
test[disease=='0'] <- sample(c('Neg','Pos'), size=sum(disease=='0'), replace=TRUE, prob=c((1-l[[4]]), l[[4]]))
test[disease=='1'] <- sample(c('Neg','Pos'), size=sum(disease=='1'), replace=TRUE,prob=c((1-l[[3]]), l[[3]]))
# P(disease|test-)
mean(disease[test=='Neg']=='1')
# Compute the expected counts for each cell
(E_top_children = 15*26/43)
(E_top_adult = 15*17/43)
(E_middle_children = 19*26/43)
(E_middle_adult = 19*17/43)
(E_bottom_children = 9*26/43)
(E_bottom_adult = 9*17/43)
# calculate X-squared
(X_squared = (E_top_children-1)^2/E_top_children + (E_top_adult-14)^2/E_top_adult + (E_middle_children-18)^2/E_middle_children + (E_middle_adult-1)^2/E_middle_adult + (E_bottom_children-7)^2/E_bottom_children + (E_bottom_adult-2)^2/E_bottom_adult)
# or we can use a function to calculate X-squared
myfunction = function(A){
r <- rowSums(A) # how many individuals for each Religion
c <- colSums(A) # how many individuals for each DeathPenalty view
N = sum(A)
expected <- outer(r,c)/N # multiplying all possible combinations by 'outer()' function
return(sum((A-expected)^2/expected))
}
(x = myfunction(table(Cereals$Age, Cereals$Shelf)))
pchisq(x, df = (2-1)*(3-1), lower.tail = F) # p-value
# Compute the expected counts for each cell
(E_top_children = 15*26/43)
(E_top_adult = 15*17/43)
(E_middle_children = 19*26/43)
(E_middle_adult = 19*17/43)
(E_bottom_children = 9*26/43)
(E_bottom_adult = 9*17/43)
# From the output, we can see that some expected counts are small so R returns a warning message.
A <- table(Cereals$Age, Cereals$Shelf)
r <- rowSums(A) #how many individuals in each education level
c <- colSums(A) #how many individuals of each marital status
N = sum(A)
expected <- outer(r,c)/N #multiplying all possible combinations by 'outer()' function
expected
# Compute the expected counts for each cell
A <- table(Cereals$Age, Cereals$Shelf)
r <- rowSums(A)
c <- colSums(A)
N = sum(A)
(expected <- outer(r,c)/N) #multiplying all possible combinations by 'outer()' function
# Compute the expected counts for each cell
(E_top_children = 15*26/43)
(E_top_adult = 15*17/43)
(E_middle_children = 19*26/43)
(E_middle_adult = 19*17/43)
(E_bottom_children = 9*26/43)
(E_bottom_adult = 9*17/43)
# From the output, we can see that some expected counts are small so R returns a warning message.
N = 10000 # Number of samples for the simulation
gamma = .9 # Confidence level = desired coverage probability
n = 20 # Sample size
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
for (j in 1:N){
x <- rnorm(n)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
}
# Find fraction of cases where the CI is too far to the right:
mean(mydf$L > 0) # proability that the CI is too far to the right
# Find fraction of cases where the CI is too far to the left:
mean(mydf$U < 0) # proability that the CI is too far to the left
# Probabilities add to about 5%.
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
myfunction = function(N, gamma, n, mean, sd){
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
}
}
# use myfunction
N = 10000 # Number of samples for the simulation
gamma = .9 # Confidence level = desired coverage probability
n = 20 # Sample size
mean = 18.05 # sample mean
sd = 5 # sample standard deviation
myfunction(N, gamma, n, mean, sd)
(myfunction(N, gamma, n, mean, sd))
# create a function that computes the t-formula confidence interval
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
myfunction = function(N, gamma, n, mean, sd){
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
}
}
# use myfunction
N = 10000 # Number of samples for the simulation
gamma = .9 # Confidence level = desired coverage probability
n = 20 # Sample size
mean = 18.05 # sample mean
sd = 5 # sample standard deviation
myfunction(N, gamma, n, mean, sd)
# Find fraction of cases where the CI is too far to the right:
mean(mydf$L > 0) # proability that the CI is too far to the right
# Find fraction of cases where the CI is too far to the left:
mean(mydf$U < 0) # proability that the CI is too far to the left
# Probabilities add to about 5%.
myfunction = function(N, gamma, n, mean, sd){
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
}
}
# use myfunction
N = 10000 # Number of samples for the simulation
gamma = .9 # Confidence level = desired coverage probability
n = 20 # Sample size
mean = 18.05 # sample mean
sd = 5 # sample standard deviation
myfunction(N, gamma, n, mean, sd)
# Find fraction of cases where the CI is too far to the right:
mean(mydf$L > 0) # proability that the CI is too far to the right
# Find fraction of cases where the CI is too far to the left:
mean(mydf$U < 0) # proability that the CI is too far to the left
myfunction = function(N, gamma, n, mean, sd){
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
}
}
# use myfunction
myfunction(10000, .9, 20, 18.05, 5)
(myfunction(10000, .9, 20, 18.05, 5))
N = 10000 # Number of samples for the simulation
gamma = .9 # Confidence level = desired coverage probability
n = 20 # Sample size
mean = 18.05 # sample mean
sd = 5 # sample standard deviation
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
}
mean(mydf$L > 0) # proability that the CI is too far to the right
# Find fraction of cases where the CI is too far to the left:
mean(mydf$U < 0) # proability that the CI is too far to the left
# create a function that computes the t-formula confidence interval
N = 10000 # Number of samples for the simulation
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
myfunction = function(n, mean, sd, gamma){
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
mean(mydf$L > 0)
mean(mydf$U < 0)
}
}
# use myfunction
(myfunction(20, 18.05, 5, .9))
N = 10000 # Number of samples for the simulation
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
myfunction = function(n, mean, sd, gamma){
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
}
}
(myfunction(20, 18.05, 5, .9))
myfunction = function(n, mean, sd, gamma){
for (j in 1:N){
x <- rnorm(n, mean, sd)
print (x)
}
}
(myfunction(20, 18.05, 5, .9))
myfunction = function(n, mean, sd, gamma){
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
print(mytest)
}
}
(myfunction(20, 18.05, 5, 0.9))
N = 10000 # Number of samples for the simulation
mydf = data.frame(L = rep(NA,N), U = rep(NA,N))
myfunction = function(n, mean, sd, gamma){
for (j in 1:N){
x <- rnorm(n, mean, sd)
mytest <- t.test(x, conf.level = gamma)
mydf$L[j] = mytest$conf.int[1]
mydf$U[j] = mytest$conf.int[2]
print(mydf)
}
}
(myfunction(20, 18.05, 5, 0.9))
